<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>동적 폼 전송</title>
    <!-- jquery cdn -->
    <script
      src="https://code.jquery.com/jquery-3.7.1.min.js"
      integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="
      crossorigin="anonymous"
    ></script>
    <!-- axios cdn -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
      div.result {
        font-size: 24px;
        font-weight: 700;
      }
    </style>
  </head>
  <body>
    <h1>동적 폼 전송 연습하기!</h1>

    <!-- 이름 성별 -->
    <form name="register">
      <p>이름</p>
      <input type="text" name="username" id="username" />
      <fieldset>
        <legend>성별</legend>
        <input type="radio" name="sex" id="male" value="남자" />
        <label for="male">남자</label>
        <input type="radio" name="sex" id="female" value="여자" />
        <label for="female">여자</label>
      </fieldset>
      <br />
      <button type="button" onclick="ajaxGet()">Ajax GET 제출</button>
      <button type="button" onclick="ajaxPost()">Ajax POST 제출</button>
      <button type="button" onclick="axiosGet()">Axios GET 제출</button>
      <button type="button" onclick="axiosGet2()">
        Axios GET 제출 비동기 처리
      </button>

      <button type="button" onclick="axiosPost()">
        Axios POST 제출 비동기 처리
      </button>

      <button type="button" onclick="fetchGet()">fetch get 제출</button>

      <button type="button" onclick="fetchPost()">fetch post 제출</button>
    </form>
    <!-- 동적 폼 전송 결과를 보여줄 곳 -->
    <div class="result"></div>
    <script>
      const resultBox = document.querySelector(".result");
      function ajaxGet() {
        console.log("ajaxGet 함수 호출!");

        //폼선택
        const form = document.forms["register"];
        console.log(form);
        console.log(form.username.value); // 이름 입력 값
        console.log(form.sex.value); // 성별 입력 값

        // 요청에서 실어서 보낼 데이터 변수 (서버에서 받을 정보)
        const data = {
          name: form.username.value,
          gender: form.sex.value,
        };

        // Ajax로 서버에 GET 요청 보내기
        $.ajax({
          type: "get", // 요청의 종류 (=form의 메소드 속성)
          url: "/ajax", // 요청의 경로(=form 의 action 속성)
          data: data, // 요청에 실어보낼 데이터
          success: function (data) {
            // 요청이 성공적으로 수행되었을 때 실행 될 함수
            console.log("success", data);
            resultBox.textContent = `Get /ajax요청 완료! ${data.name}님의 성별은 ${data.gender}네요`;
          },
        });
      }

      function ajaxPost() {
        console.log("ajaxGet 함수 호출!");

        //폼선택
        const form = document.forms["register"];

        // 요청에서 실어서 보낼 데이터 변수 (서버에서 받을 정보)
        const data = {
          name: form.username.value,
          gender: form.sex.value,
        };

        // Ajax로 서버에 POST 요청 보내기
        $.ajax({
          type: "post", // 요청의 종류 (=form의 메소드 속성)
          url: "/ajax", // 요청의 경로(=form 의 action 속성)
          data: data, // 요청에 실어보낼 데이터
          success: function (data) {
            // 요청이 성공적으로 수행되었을 때 실행 될 함수
            console.log("success", data);
            resultBox.textContent = `Post /ajax요청 완료! ${data.name}님의 성별은 ${data.gender}네요`;
          },
        });
      }
      function axiosGet() {
        console.log("axiosGet 함수 호출!");

        //폼선택
        const form = document.forms["register"];

        // 요청에서 실어서 보낼 데이터 변수 (서버에서 받을 정보)
        const data = {
          name: form.username.value,
          gender: form.sex.value,
        };

        // axios 요청의 결과는 Promise 객체
        // -> then - catch 메서드로 체이닝 가능
        // -> async/await 도 사용가능

        axios({
          method: "get",
          url: "/axios",
          params: data,
        }).then((response) => {
          console.log(response); // 서버의 응답결과 (response.data: 응답 데이터)
          resultBox.textContent = `Get /axios요청 완료! ${response.data.name}님의 성별은 ${response.data.gender}네요`;
        });
      }

      // async-await로 변경하기
      async function axiosGet2() {
        console.log("axiosGet2 함수 호출!");

        //폼선택
        const form = document.forms["register"];

        // 요청에서 실어서 보낼 데이터 변수 (서버에서 받을 정보)
        const data = {
          name: form.username.value,
          gender: form.sex.value,
        };

        // 요청에서 실어서 보낼 데이터 변수 (서버에서 받을 정보)
        try {
          const response = await axios({
            method: "get",
            url: "/axios",
            params: data,
          });
          const { name, sex } = response.data;
          resultBox.textContent = `${name}님의 성별은 ${sex}네요`;
        } catch (error) {
          console.log(error);
          resultBox.textContent = "에러발생! 다시 시도해주세요~";
        }
      }

      async function axiosPost() {
        console.log("axiosPost 함수 호출!");

        //폼선택
        const form = document.forms["register"];

        // 요청에서 실어서 보낼 데이터 변수 (서버에서 받을 정보)
        const data = {
          name: form.username.value,
          sex: form.sex.value,
        };
        console.log(data);

        // axios 요청의 결과는 Promise 객체
        // -> then - catch 메서드로 체이닝 가능
        // -> async/await 도 사용가능
        try {
          const response = await axios({
            method: "post",
            url: "/axios",
            data: data,
          });
          console.log(response); // 서버의 응답결과 (response.data: 응답 데이터)
          resultBox.textContent = `Get /post요청 완료! ${response.data.name}님의 성별은 ${response.data.sex}네요`;
        } catch (error) {
          resultBox.textContent = "에러 발생! 다시 시도해주세요";
          console.log(error);
        }
      }

      function fetchGet() {
        console.log("fetchGet 함수 호출!");

        //폼선택
        const form = document.forms["register"];

        // 요청에서 실어서 보낼 데이터 변수 (서버에서 받을 정보)
        const data = {
          name: form.username.value,
          sex: form.sex.value,
        };

        // fetch는 default로 get 방식으로 작동한다!(get메소드일 경우 생략 가능)
        fetch(`/fetch?name=${data.name}&sex=${data.sex}`)
          .then((response) => {
            console.log(response);
            // JSON 형태로 응답 데이터를 전달 받음. 응답 객체는 json 메서드를 제공
            // 응답 객체로부터 JSON 포멧의 응답 전문을 자바스크립트 객체로 변환해줘야함
            // console.log(response.json()); <- 이거 찍어보니까 프로미스 객체로 나온다 이걸 풀어주기 위해서
            // then(프로미스 체이닝)을 적용 해야함 따라서 promise 객체를 반환하는 작업 필요
            return response.json();
          })
          .then((data) => {
            console.log(data);
            resultBox.textContent = `Get /post요청 완료! ${data.name}님의 성별은 ${data.sex}네요`;
          });
      }

      function fetchPost() {
        console.log("fetchPost 함수 호출!");

        //폼선택
        const form = document.forms["register"];

        // 요청에서 실어서 보낼 데이터 변수 (서버에서 받을 정보)
        const data = {
          name: form.username.value,
          sex: form.sex.value,
        };

        // fetch를 이용해 post 요청을 보낼 때는 option 객체가 필요함!
        // 1. method 키 값으로 post 지정
        // 2. headers 키 값으로 json 포켓 사용 선언
        // 3. body 키 값으로 서버로 보낼 데이터 지정
        fetch("/fetch", {
          method: "post",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data), // 자바스크립트 객체 타입을 -> json 타입으로 변경
        })
          .then((response) => {
            console.log(response);
            // JSON.parse 랑 .json이랑 먼차이?
            return response.json();
          })
          .then((data) => {
            resultBox.textContent = `post /fetch요청 완료! ${data.name}님의 성별은 ${data.sex}네요`;
          });
      }
    </script>
  </body>
</html>
